// given a string s and a string t, check if s is subsequence of t 

bool is_subsequence(string s, string t) {
    int i = 0;
    for (int j = 0; j < t.size() && i < s.size(); ++j) {
        if (s[i] == t[j]) {
            ++i;
        }
    }
    return i == s.size();
}


bool is_subsequence(string s, string t) {
    int pre = -1;
    int n = t.size();

    std::unordered_map<char, std::vector<int>> char2pos;
    for (int i = 0; i < n; ++i) {
        char2pos[t[i]].push_back(i);
    }

    for (char c : s) {
        auto it = std::upper_bound(char2pos[c].begin(), char2pos[c].end(), pre);
        if (it == char2pos[c].end()) {
            return false;
        }
        pre = *it;
    }
    return true;
}
