// given an array of n positive integers and a positive integer s , 
// find the minnimal length of contiguous subarray of which the sum >= s 
// if there is not one, return 0 instead.

int min_sub_array(int s, std::vector<int>& nums) {
    if (nums.empty()) {
        return 0;
    }
    int left = 0;
    int right = 0;
    int sum = 0;
    int len = nums.size();
    int res = len + 1;

    while (right < len) {
        while (sum < s && right < len) {
            sum += nums[right++];
        }
        while (sum >= s) {
            res = min(res, right - left);
            sum -= nums[left++];
        }
    }
    return res == len + 1 ? 0 : res;
}

int min_sub_array(int s, std::vector<int>& nums) {
    int len = nums.size();
    int sums[len + 1] = {0};
    int res = len + 1;

    for (int i = 1; i < len + 1; ++i) {
        sums[i] = sums[i - 1] + nums[i - 1];
    }

    for (int i = 0; i < len + 1; ++i) {
        int right = search_right(i + 1, len, sums[i] + s, sums);
        if (right == len + 1) {
            break;
        }
        if (res > right - i) {
            res = right - i;
        }
    }
    return res == len + 1 ? 0 : res;
}

int search_right(int left, int right, int key, int sums[]) {
    while (left <= right) {
        int mid = (left + right) / 2;
        if (sums[mid] >= key) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return left;
}
